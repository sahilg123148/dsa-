 #include <stdio.h>
 #include <stdlib.h>
 #include <limits.h>
 #define MAX 100 // Maximum size of the queue
 typedef struct Queue {
 int front, rear, size;
 int arr[MAX];
 } Queue;
 // Function to create and initialize the queue
 Queue* createQueue() {
 Queue* queue = (Queue*)malloc(sizeof(Queue));
 queue->front = 0;
 queue->rear =-1;
 queue->size = 0;
 return queue;
}
 // Check if the queue is empty
 int isEmpty(Queue* queue) {
 return queue->size == 0;
 }
 // Check if the queue is full
 int isFull(Queue* queue) {
 return queue->size == MAX;
 }
 // Function to add an element to the queue
 void enqueue(Queue* queue, int item) {
 if (isFull(queue)) {
 printf("Queue is full. Cannot enqueue %d.\n", item);
 return;
 }
 queue->rear = (queue->rear + 1) % MAX; // Circular increment
 queue->arr[queue->rear] = item;
 queue->size++;
 printf("%d enqueued to queue.\n", item);
 }
 // Function to remove and return the front element of the queue
 int dequeue(Queue* queue) {
 if (isEmpty(queue)) {
 printf("Queue is empty. Cannot dequeue.\n");
 return INT_MIN; // Return a sentinel value
 }
 int item = queue->arr[queue->front];
 queue->front = (queue->front + 1) % MAX; // Circular increment
 queue->size--;
 return item;
 }
 // Function to get the front element of the queue
 int front(Queue* queue) {
 if (isEmpty(queue)) {
 printf("Queue is empty.\n");
 return INT_MIN; // Return a sentinel value
 }
 return queue->arr[queue->front];
 }
// Main function to demonstrate queue operations
 int main() {
 Queue* queue = createQueue();
 enqueue(queue, 10);
 enqueue(queue, 20);
 enqueue(queue, 30);
 printf("Front element: %d\n", front(queue));
 printf("%d dequeued from queue.\n", dequeue(queue));
 printf("%d dequeued from queue.\n", dequeue(queue));
 enqueue(queue, 40);
 printf("Front element: %d\n", front(queue));
 while (!isEmpty(queue)) {
 printf("%d dequeued from queue.\n", dequeue(queue));
 }
 return 0;
 }
 
