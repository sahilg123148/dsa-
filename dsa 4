#include <stdio.h>
 #define SIZE 5 // Maximum size of the circular queue
 int queue[SIZE];
 int front = -1, rear = -1;
 // Function to add an element to the circular queue
 void enqueue(int value) {
    if ((front == 0 && rear == SIZE -1) || (rear == (front -1) % (SIZE -1))) {
        printf("Queue is Full\n");
        return;
    }
    else if (front == -1) { // First element being inserted
        front = rear = 0;
        queue[rear] = value;
    }
    else if (rear == SIZE -1 && front != 0) {
 1
        rear = 0;
        queue[rear] = value;
    }
    else {
        rear++;
        queue[rear] = value;
    }
 }
 // Function to remove an element from the circular queue
 int dequeue() {
    if (front == -1) {
        printf("Queue is Empty\n");
        return -1;
    }
    int data = queue[front];
    queue[front] = -1; // Reset the dequeued position
    if (front == rear) { // Queue becomes empty
        front = rear = -1;
    }
    else if (front == SIZE -1) {
        front = 0;
    }
    else {
        front++;
    }
    return data
 // Function to display the queue
 void displayQueue() {
    if (front == -1) {
        printf("Queue is Empty\n");
        return;
    }
    printf("Queue elements: ");
    if (rear >= front) {
        for (int i = front; i <= rear; i++)
            printf("%d ", queue[i]);
    }
 2
    else {
        for (int i = front; i < SIZE; i++)
            printf("%d ", queue[i]);
        for (int i = 0; i <= rear; i++)
            printf("%d ", queue[i]);
    }
    printf("\n");
 }
 int main() {
    enqueue(10);
    enqueue(20);
    enqueue(30);
    enqueue(40);
    enqueue(50);
    displayQueue();
    dequeue();
    displayQueue();
    enqueue(60);
    displayQueue();
    return 0;
 }
 
