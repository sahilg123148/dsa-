#include <stdio.h> 
#include <stdlib.h> 
// Definition of the node structure 
struct Node { 
int data; 
struct Node *left; 
struct Node *right; 
int height; 
}; 
// Function to get the height of a node 
int height(struct Node *node) { 
return node ? node->height : 0; 
} 
// Function to get the balance factor of a node 
int getBalance(struct Node *node) { 
return node ? height(node->left) - height(node->right) : 0; 
} 
// Function to create a new node 
struct Node* createNode(int value) { 
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); 
newNode->data = value; 
newNode->left = newNode->right = NULL; 
newNode->height = 1; // New node is initially added at leaf 
return newNode; 
} 
// Right rotation 
struct Node* rightRotate(struct Node *y) { 
struct Node *x = y->left; 
struct Node *T2 = x->right; 
// Perform rotation 
x->right = y; 
y->left = T2; 
// Update heights 
y->height = 1 + (height(y->left) > height(y->right) ? height(y->left) : height(y->right)); 
x->height = 1 + (height(x->left) > height(x->right) ? height(x->left) : height(x->right)); 
// Return the new root 
return x; 
} 
// Left rotation 
struct Node* leftRotate(struct Node *x) { 
struct Node *y = x->right; 
struct Node *T2 = y->left; 
// Perform rotation 
y->left = x; 
x->right = T2; 
// Update heights 
x->height = 1 + (height(x->left) > height(x->right) ? height(x->left) : height(x->right)); 
y->height = 1 + (height(y->left) > height(y->right) ? height(y->left) : height(y->right)); 
// Return the new root 
return y; 
} 
// Function to insert a value into the AVL tree 
struct Node* insert(struct Node* node, int value) { 
// Perform the normal BST insertion 
if (node == NULL) return createNode(value); 
if (value < node->data) 
node->left = insert(node->left, value); 
else if (value > node->data) 
node->right = insert(node->right, value); 
else // Duplicate values are not allowed 
return node; 
// Update the height of this ancestor node 
node->height = 1 + (height(node->left) > height(node->right) ? height(node->left) : 
height(node->right)); 
// Get the balance factor of this ancestor node 
int balance = getBalance(node); 
// If the node becomes unbalanced, then there are 4 cases 
// Left Left Case 
if (balance > 1 && value < node->left->data) 
return rightRotate(node); 
// Right Right Case 
if (balance < -1 && value > node->right->data) 
return leftRotate(node); 
// Left Right Case 
if (balance > 1 && value > node->left->data) { 
node->left = leftRotate(node->left); 
return rightRotate(node); 
} 
// Right Left Case 
if (balance < -1 && value < node->right->data) { 
node->right = rightRotate(node->right); 
return leftRotate(node); 
}} 
void inorder(struct Node *root) { 
if (root) { 
inorder(root->left); 
printf("%d ", root->data); 
inorder(root->right); 
} 
} 
int main() { 
struct Node* root = NULL; 
// Inserting values into the AVL tree 
root = insert(root, 30); 
root = insert(root, 20); 
root = insert(root, 10); // Causes Right Rotation 
root = insert(root, 40); 
root = insert(root, 50); 
root = insert(root, 60); // Causes Left Rotation 
printf("Inorder traversal of the AVL tree: "); 
inorder(root); // Output: 10 20 30 40 50 60 
return 0; 
} 
