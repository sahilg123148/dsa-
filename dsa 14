#include <stdio.h>
 void merge(int arr[], int left, int mid, int right) {
 int i, j, k;
 int n1 = mid- left + 1;
 int n2 = right- mid;
 int L[n1], R[n2];
 for (i = 0; i < n1; i++)
 L[i] = arr[left + i];
 for (j = 0; j < n2; j++)
 R[j] = arr[mid + 1 + j];
 i = 0;
 j = 0;
 k = left;
 while (i < n1 && j < n2) {
 if (L[i] <= R[j]) {
 arr[k] = L[i];
 i++;
} else {
 arr[k] = R[j];
 j++;
 }
 k++;
 }
 while (i < n1) {
 arr[k] = L[i];
 i++;
 k++;
 }
 while (j < n2) {
 arr[k] = R[j];
 j++;
 k++;
 }
 }
 void merge_sort(int arr[], int left, int right) {
 if (left < right) {
 int mid = left + (right- left) / 2;
 merge_sort(arr, left, mid);
 merge_sort(arr, mid + 1, right);
 merge(arr, left, mid, right);
 }
 }
 int partition(int arr[], int low, int high) {
 int pivot = arr[high]; // pivot
 int i = (low- 1);
 for (int j = low; j < high; j++) {
 if (arr[j] < pivot) {
 i++;
 // Swap arr[i] and arr[j]
 int temp = arr[i];
 arr[i] = arr[j];
 arr[j] = temp;
 }
 }
 int temp = arr[i + 1];
 arr[i + 1] = arr[high];
 arr[high] = temp;
 return i + 1;
 }
 void quick_sort(int arr[], int low, int high) {
 if (low < high) {
int pi = partition(arr, low, high);
 quick_sort(arr, low, pi- 1); // Before pi
 quick_sort(arr, pi + 1, high); // After pi
 }
 }
 void print_array(int arr[], int size) {
 for (int i = 0; i < size; i++)
 printf("%d ", arr[i]);
 printf("\n");
 }
 int main() {
 int choice, n;
 while (1) {
 printf("\nMenu:\n");
 printf("1. Merge Sort\n");
 printf("2. Quick Sort\n");
 printf("3. Exit\n");
 printf("Enter your choice: ");
 scanf("%d", &choice);
 if (choice == 3) {
 printf("Exiting...\n");
 break;
 }
 printf("Enter the number of elements: ");
 scanf("%d", &n);
 int arr[n];
 printf("Enter the elements:\n");
 for (int i = 0; i < n; i++) {
 scanf("%d", &arr[i]);
 }
 switch (choice) {
 case 1:
 merge_sort(arr, 0, n- 1);
 printf("Merge Sort: ");
 print_array(arr, n);
 break;
 case 2:
 quick_sort(arr, 0, n- 1);
 printf("Quick Sort: ");
 print_array(arr, n);
 break;
 default:
 printf("Invalid choice\n");
 }
}
 return 0;
 }
 OUTPUT
